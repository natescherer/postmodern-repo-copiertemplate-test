name: $(BuildId)

trigger:
  branches:
    exclude:
    - '*'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: release
    displayName: Release
    jobs:
      - job: release
        displayName: Release Template
        steps:
          - checkout: self
            fetchDepth: 0
            persistCredentials: true
          - task: UseNode@1
            inputs:
              version: ">=22.x"
            displayName: Install Node
          - pwsh: |
              git config user.email "azuredevops@microsoft.com"
              git config user.name "Azure DevOps"

              $MinVersion = "{% if is_prerelease %}0.1.0{% else %}1.0.0{% endif %}"
              $VersionFile = ".version.txt"

              if (!(Test-Path -Path $VersionFile)) {
                New-Item -ItemType File -Path $VersionFile | Out-Null
                npx --yes commit-and-tag-version --release-as $MinVersion
              } elseif ([System.Version](Get-Content -Path $VersionFile) -lt [System.Version]$MinVersion) {
                npx --yes commit-and-tag-version --release-as $MinVersion 
              } else {
                npx --yes commit-and-tag-version
              }

              $ReleaseVersion = Get-Content -Path $VersionFile
              Write-Host "##vso[task.setvariable variable=RELEASE_VERSION;]$ReleaseVersion"

              git checkout -b release-v$ReleaseVersion
              git push origin --tags
            failOnStderr: false # Git writes to stderr normally
            displayName: Run 'commit-and-tag-version'
          - pwsh: |
              $OrgBaseUri = "$(System.CollectionUri)/_apis"
              $ProjectBaseUri = "$(System.CollectionUri)/$(System.TeamProject)/_apis"
              $BaseSplat = @{
                ContentType = "application/json"
                Headers = @{
                  Authorization = "Basic $([Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("user:$env:SYSTEM_ACCESSTOKEN")))"
                }
              }

              $IDSplat = $BaseSplat + @{
                Uri = "$OrgBaseUri/connectionData"
                Method = "GET"
              }
              Write-Host "Finding Reviewer ID..."
              $IDResponse = Invoke-RestMethod @IDSplat
              $ReviewerID = $IDResponse.authenticatedUser.id
              Write-Host "Reviewer ID is '$ReviewerID'"

              $CreateSplat = $BaseSplat + @{
                Uri = "$ProjectBaseUri/git/repositories/$(Build.Repository.Name)/pullrequests?api-version=7.0"
                Method = "POST"
                Body = ConvertTo-Json @{
                  sourceRefName = "refs/heads/release/$(RELEASE_VERSION)"
                  targetRefName = "$(Build.SourceBranch)"
                  title = "chore: release v$(RELEASE_VERSION)"
                  description = "Release v$(RELEASE_VERSION)"
                }
              }
              Write-Host "Creating Pull Requests..."
              $CreateResponse = Invoke-RestMethod @CreateSplat
              $PullRequestID = $CreateResponse.pullRequestId
              Write-Host "Pull Request ID is '$PullRequestID'"

              Start-Sleep -Seconds 5

              $ApproveSplat = $BaseSplat + @{
                Uri = "$ProjectBaseUri/git/repositories/$(Build.Repository.Name)/pullrequests/$PullRequestID/reviewers/$($ReviewerID)?api-version=7.0"
                Method = "PUT"
                Body = ConvertTo-Json @{
                  hasDeclined = $false
                  id = $ReviewerID
                  vote = 10
                }
              }
              Write-Host "Approving Pull Request..."
              Invoke-RestMethod @ApproveSplat | Out-Null

              Start-Sleep -Seconds 5

              $MergeSplat = $BaseSplat + @{
                Uri = "$ProjectBaseUri/git/repositories/$(Build.Repository.Name)/pullrequests/$($PullRequestID)?api-version=7.0"
                Method = "PATCH"
                Body = ConvertTo-Json @{
                  lastMergeSourceCommit = @{
                    commitId = $CreateResponse.lastMergeSourceCommit.commitId
                  }
                  status = "completed"
                  completionOptions = @{
                    bypassPolicy = $true
                    bypassReason = "Release"
                    deleteSourceBranch = $true
                    mergeCommitMessage = "chore: release v$(VERSION) [skip ci]"
                    mergeStrategy = "noFastForward"
                  }
                }
              }
              Write-Host "Merging Pull Request..."
              Invoke-RestMethod @MergeSplat | Out-Null
            failOnStderr: true
            displayName: Create & Merge Pull Request
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)