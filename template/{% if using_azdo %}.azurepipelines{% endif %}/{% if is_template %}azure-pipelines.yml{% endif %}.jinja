name: $(BuildId)

trigger:
  branches:
    exclude:
    - '*'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: release
    displayName: Release
    jobs:
      - job: release
        displayName: Release Template
        steps:
          - checkout: self
            fetchDepth: 0
            persistCredentials: true
          - task: UseNode@1
            inputs:
              version: >=22.x
            displayName: Install Node
          - pwsh: |
              git config user.email "azuredevops@microsoft.com"
              git config user.name "Azure DevOps"

              $TempFilePath = "version-tempfile-for-ci-output.txt"
              New-Item -ItemType File -Path $TempFilePath | Out-Null

              npx --yes commit-and-tag-version

              Write-Host "##vso[task.setvariable variable=newversion;]$(Get-Content -Path $TempFilePath)"
              Remove-Item -Path $TempFilePath

              git push --set-upstream origin release/$(newversion)
              git push origin --tags
            failOnStderr: false # Git writes to stderr normally
            displayName: Run 'commit-and-tag-version'
          - pwsh: |
              $BaseUri = "$(System.CollectionUri)/$(System.TeamProject)/_apis"
              $BaseSplat = @{
                ContentType = "application/json"
                Headers = @{
                  Authorization = "Basic $([Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("user:$env:SYSTEM_ACCESSTOKEN")))"
              }

              $IDSplat = $BaseSplat + @{
                Uri = "$BaseUri/connectionData"
                Method = "GET"
              }
              $IDResponse = Invoke-RestMethod @IDSplat
              $ReviewerID = $IDResponse.authenticatedUser.id

              $CreateSplat = $BaseSplat + @{
                Uri = "$BaseUri/git/repositories/$(Build.Repository.Name)/pullrequests?api-version=7.0"
                Method = "POST"
                Body = ConvertTo-Json @{
                  sourceRefName = "refs/heads/release/$(newversion)"
                  targetRefName = "$(Build.SourceBranch)"
                  title = "chore: release v$(newversion)"
                  description = "Release v$(newversion)"
                }
              }
              $CreateResponse = Invoke-RestMethod @CreateSplat
              $PullRequestID = $CreateResponse.pullRequestId

              Start-Sleep -Seconds 5

              $ApproveSplat = $BaseSplat + @{
                Uri = "$BaseUri/git/repositories/$(Build.Repository.Name)/pullrequests/$PullRequestID/reviewers/$($ReviewerID)?api-version=7.0"
                Method = "PUT"
                Body = ConvertTo-Json @{
                  hasDeclined = $false
                  id = $ReviewerID
                  vote = 10
                }
              }
              Invoke-RestMethod @ApproveSplat | Out-Null

              Start-Sleep -Seconds 5

              $MergeSplat = $BaseSplat + @{
                Uri = "$BaseUri/git/repositories/$(Build.Repository.Name)/pullrequests/$($PullRequestID)?api-version=7.0"
                Method = "PATCH"
                Body = ConvertTo-Json @{
                  lastMergeSourceCommit = @{
                    commitId = $CreateResponse.lastMergeSourceCommit.commitId
                  }
                  status = "completed"
                  completionOptions = @{
                    bypassPolicy = $true
                    bypassReason = "Release"
                    deleteSourceBranch = $true
                    mergeCommitMessage = "chore: release v$(newversion) [skip ci]"
                    mergeStrategy = "noFastForward"
                  }
                }
              }
              Invoke-RestMethod @MergeSplat | Out-Null
            failOnStderr: true
            displayName: Create & Merge Pull Request
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)